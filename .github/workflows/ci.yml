name: CI

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build the app on all supported platforms, at least for the time being
  build:
    strategy:
      matrix:
        include:
        - build: x86_64-musl
          host: ubuntu-latest
          target: x86_64-unknown-linux-musl
          rust: stable
          build_deb: true
        - build: aarch64-musl
          host: ubuntu-latest
          target: aarch64-unknown-linux-musl
          rust: stable
          build_deb: true
    runs-on: ${{ matrix.host }}
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}
    - name: Install tools
      uses: taiki-e/install-action@v2
      with:
        tool: cross,cargo-deb
    #- name: Set minimal profile (Windows only)
    #  if: matrix.host == 'windows-latest'
    #  run: rustup set profile minimal
    - uses: Swatinem/rust-cache@v2
      with:
        key: "${{ matrix.build }}"
        cache-on-failure: true
    - name: install packages (ubuntu hosts only)
      if: startsWith(matrix.host, 'ubuntu')
      run: scripts/install-ubuntu-packages

    - name: Build
      run: cross build --release --locked --target ${{ matrix.target }}
    - name: Make debian package
      if: ${{ matrix.build_deb }}
      run: scripts/make-debian-package ${{ matrix.target }}

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: qcp-bin-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/qcp
    - name: Upload deb
      if: ${{ matrix.build_deb }}
      uses: actions/upload-artifact@v4
      with:
        name: qcp-deb-${{ matrix.target }}
        path: target/**/debian/qcp*.deb

  # We only need to run the checks on a single platform
  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          key: checks
          cache-on-failure: true
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: install packages
        run: scripts/install-ubuntu-packages
      # Checks begin here!
      - run: cargo fmt --all -- --check
      - run: cargo test --locked
      - run: cargo clippy --locked --all-targets
      # We care that the benchmarks build and run, not about their numeric output.
      # To keep the CI a bit leaner, do this in the dev profile.
      - run: cargo build --locked --all-targets
      - run: cargo doc --no-deps --locked
