name: Packaging

on:
  workflow_call:
    inputs:
      publish:
        required: true
        type: boolean

env:
  BUILT_DEB_FILE: "invalid.deb" # updated by make-debian-package script
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0

jobs:
  package:
    strategy:
      matrix:
        include:
        - build: x86_64-musl
          host: ubuntu-latest
          target: x86_64-unknown-linux-musl
          rust: stable
          build_deb: true
        - build: aarch64-musl
          host: ubuntu-latest
          target: aarch64-unknown-linux-musl
          rust: stable
          build_deb: true
    runs-on: ${{ matrix.host }}
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
            # this action is used in multiple places
      with:
        toolchain: stable
        targets: ${{ matrix.target }}
    - name: Additional rust tools
      uses: taiki-e/install-action@510b3ecd7915856b6909305605afa7a8a57c1b04 # v2.48.1
            # this action is used in multiple places
      with:
        tool: cross,cargo-deb,cargo-about,cargo-cyclonedx
        checksum: true
    #- name: Set minimal profile (Windows only)
    #  if: matrix.host == 'windows-latest'
    #  run: rustup set profile minimal

    - name: install packages (ubuntu builds only)
      if: startsWith(matrix.host, 'ubuntu')
      run: scripts/install-ubuntu-packages ${{ matrix.target }}
      # native builds need all of these; cross builds only need binutils-multiarch

    ####### Ensure all tools are loaded before rust-cache, or they will be cached themselves ######
    - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8
            # this action is used in multiple places
      with:
        key: "${{ matrix.build }}"
        cache-on-failure: ${{ ! inputs.publish }}
        cache-all-crates: true
        # don't bother to cache on tagged builds
        save-if: ${{ !startsWith(github.ref, 'refs/tags') }}

    #- name: Build
    #  run: cross build --release --locked --target ${{ matrix.target }}
    - name: Generate licenses.html
      run: cargo xtask licenses -o qcp/misc/licenses.html
      env:
        QCP_BUILD_TARGET: ${{ matrix.target }}
    - name: Generate CycloneDX SBOM
      run: cargo cyclonedx --target ${{ matrix.target }}
    - name: Build binary package with conditional publish
      uses: taiki-e/upload-rust-binary-action@e7953b6078194a4ae5f5619632e3715db6275561 # v1.24.0
      id: build
      with:
        bin: qcp
        dry_run: ${{ ! inputs.publish }} # Only publish the artifact on release
        token: ${{ secrets.GITHUB_TOKEN }} # Needs write permission on release
        target: ${{ matrix.target }}
        include: README.md,LICENSE,CHANGELOG.md,qcp/misc/licenses.html,qcp/qcp.cdx.xml
        leading-dir: true
        locked: true
        tar: unix
        zip: windows
    - name: Upload binary package to CI result
      # always try to do this, it allows the package to be checked
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: qcp-tarball-${{ matrix.target }}
        path: ${{ steps.build.outputs.archive }}.tar.gz
    - name: Make deb package
      if: ${{ matrix.build_deb }}
      env:
        # Compute the flag to pass to the script
        RELEASE_FLAG: ${{ inputs.publish && '--release' || '--no-release' }}
      run: scripts/make-debian-package $RELEASE_FLAG ${{ matrix.target }}
    - name: Upload deb artifact to CI result
      if: ${{ matrix.build_deb }}
      uses: actions/upload-artifact@v4
      with:
        name: qcp-deb-${{ matrix.target }}
        # this env var is set by make-debian-package
        path: ${{ env.BUILT_DEB_FILE }}

    - name: Publish deb package (release only)
      if: ${{ matrix.build_deb && inputs.publish }}
      # Needs write perms on release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release upload ${{ github.ref_name }} ${{ env.BUILT_DEB_FILE }}
